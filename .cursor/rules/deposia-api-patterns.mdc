---
description: Deposia API endpoint creation and data module access patterns
globs: ["api/**", "data/**"]
alwaysApply: false
---

# Deposia API Development Patterns

Simple patterns for the streamlined Deposia avatar creation API.

## Core Function Pattern

The main avatar creation function should:

```python
def create_avatar_image(text_query: str, expert_type: str = "general") -> Dict[str, Any]:
    """
    Create an expert witness persona and generate an avatar image using OpenAI API.
    """
    try:
        # Get API key
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            return {"status": "error", "message": "API key not found"}
        
        # Use configuration from config.toml
        client = OpenAI(api_key=api_key)
        
        # Generate persona and image
        # Return structured response
        return {
            "status": "ok",
            "data": {
                "persona": "...",
                "image_url": "...",
                "expert_type": expert_type
            }
        }
    except Exception as e:
        return {"status": "error", "message": str(e)}
```

## Simple Endpoint Pattern

```python
@app.post("/avatar/create-image")
async def create_avatar_image_endpoint(request: AvatarImageRequest):
    """Create an expert witness persona and avatar image."""
    if create_avatar_image is None:
        raise HTTPException(status_code=500, detail="Service not available")
    
    return create_avatar_image(request.text_query, request.expert_type)
```

## Configuration

- Use `config.toml` for OpenAI model settings (gpt-4o, dall-e-3)
- Store API keys in environment variables
- Keep prompts simple and focused

## Response Format

Always return:
```json
{
  "status": "ok|error", 
  "message": "...",
  "data": {...}
}
```

## Keep It Simple

- One core function: create expert witness avatar with image
- Minimal endpoints: status + create-image
- Clean prompts: focused on expert witness creation
- Clear error handling
